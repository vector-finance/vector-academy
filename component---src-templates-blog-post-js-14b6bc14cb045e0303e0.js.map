{"version":3,"sources":["webpack://vector-academy/./src/templates/blog-post.js"],"names":["Post","styled","props","theme","global","surface","PostNav","Hr","palette","gray300","data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","frontmatter","description","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"mappings":"qMASMA,EAAOC,6BAAH,0DAAGA,CAAH,0GAEM,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,WAYxCC,EAAUL,yBAAH,6DAAGA,CAAH,kGAKO,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,WAQ5CE,EAAKN,wBAAH,wDAAGA,CAAH,6BACgB,SAACC,GAAD,OAAWA,EAAMC,MAAMK,QAAQC,WA2DvD,UAxDyB,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAmBR,EAAnBQ,SAAUC,EAAST,EAATS,KAElB,OACE,gBAAC,IAAD,CAAQR,SAAUA,EAAUM,MAAOH,GACjC,gBAAC,IAAD,CACEG,MAAOL,EAAKQ,YAAYH,MACxBI,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,UAEpD,gBAACtB,EAAD,CAAMuB,WAAS,EAACC,SAAS,6BACvB,8BACE,sBAAIC,SAAS,YAAYb,EAAKQ,YAAYH,OAC1C,gBAAC,IAAD,KAAUL,EAAKQ,YAAYM,OAE7B,gBAACnB,EAAD,MACA,gBAAC,IAAD,CACEoB,wBAAyB,CAAEC,OAAQhB,EAAKiB,MACxCJ,SAAS,iBAGb,gBAACnB,EAAD,KACE,sBACEwB,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGjB,EACC,gBAAC,EAAAkB,KAAD,CAAMC,GAAInB,EAASoB,OAAOC,KAAMC,IAAI,QAApC,KACKtB,EAASE,YAAYH,OAG1B,oCAGJ,0BACGE,EACC,gBAAC,EAAAiB,KAAD,CAAMC,GAAIlB,EAAKmB,OAAOC,KAAMC,IAAI,QAC7BrB,EAAKC,YAAYH,MADpB,MAIA","file":"component---src-templates-blog-post-js-14b6bc14cb045e0303e0.js","sourcesContent":["import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport styled from \"styled-components\";\n\nimport Layout from \"../components/layout\";\nimport Body1 from \"../components/body1\";\nimport Caption from \"../components/caption\";\nimport Seo from \"../components/seo\";\n\nconst Post = styled.article`\n  max-width: 1200px;\n  background: ${(props) => props.theme.global.surface};\n  border-radius: 4px;\n  padding: 16px;\n  p {\n    font-size: 16px;\n  }\n  ul,\n  ol {\n    margin: 16px;\n  }\n`;\n\nconst PostNav = styled.nav`\n  max-width: 1200px;\n  ul {\n    margin: 0;\n    li {\n      background: ${(props) => props.theme.global.surface};\n      border-radius: 4px;\n      padding: 16px;\n      margin: 24px;\n    }\n  }\n`;\n\nconst Hr = styled.hr`\n  border: 0.5px solid ${(props) => props.theme.palette.gray300};\n`;\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const { previous, next } = data;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <Post itemScope itemType=\"http://schema.org/Article\">\n        <header>\n          <h3 itemProp=\"headline\">{post.frontmatter.title}</h3>\n          <Caption>{post.frontmatter.date}</Caption>\n        </header>\n        <Hr />\n        <Body1\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n      </Post>\n      <PostNav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous ? (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            ) : (\n              <div>None</div>\n            )}\n          </li>\n          <li>\n            {next ? (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            ) : (\n              <div>None</div>\n            )}\n          </li>\n        </ul>\n      </PostNav>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}